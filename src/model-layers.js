// Generated by CoffeeScript 1.6.2
(function() {
  var app, root, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = this;

  if (root.app == null) {
    app = root.app = {};
  } else {
    app = root.app;
  }

  app.LayerModel = (function(_super) {
    __extends(LayerModel, _super);

    function LayerModel() {
      _ref = LayerModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LayerModel.prototype.defaults = {
      id: "",
      layerName: "",
      geoJSON_URL: "",
      layer: ""
    };

    LayerModel.prototype.initialize = function(options) {
      this.set("id", options.id);
      this.set("layerName", options.layerName);
      this.set("geoserverUrl", options.geoserverUrl);
      this.set("typeName", options.typeName);
      this.set("styleAttribute", options.styler || "");
      this.set("wmsLayer", this.createWmsLayer());
      if (options.useWms) {
        return this.set("defaultLayer", this.createWmsLayer());
      } else if (options.useTms) {
        this.set("tileUrl", options.tileUrl);
        return this.set("defaultLayer", this.createTileLayer());
      } else {
        return this.createD3Layer();
      }
    };

    LayerModel.prototype.createD3Layer = function() {
      var callbackName, jsonpUrl, styler, thisLayer;

      callbackName = "" + (this.get("id")) + "Data";
      styler = this.get("styleAttribute");
      jsonpUrl = "" + (this.get("geoserverUrl")) + "?service=WFS&version=1.0.0&request=GetFeature&typeName=" + (this.get("typeName")) + "&outputFormat=text/javascript&format_options=callback:" + callbackName;
      thisLayer = this;
      root[callbackName] = function(data) {
        var l;

        l = new L.GeoJSON.d3(data, {
          styler: styler
        });
        return thisLayer.set("defaultLayer", l);
      };
      return d3.text(jsonpUrl, "text/javascript", function(response) {
        return $("body").append("<script>" + response + "</script>");
      });
    };

    LayerModel.prototype.createWmsLayer = function() {
      var url;

      url = "" + (this.get("geoserverUrl"));
      return new L.TileLayer.WMS(url, {
        layers: this.get("typeName"),
        format: "image/png",
        transparent: true
      });
    };

    LayerModel.prototype.createTileLayer = function() {
      return new L.TileLayer(this.get("tileUrl"));
    };

    return LayerModel;

  })(Backbone.Model);

  app.baseMapModel = (function(_super) {
    __extends(baseMapModel, _super);

    function baseMapModel() {
      _ref1 = baseMapModel.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    baseMapModel.prototype.defaults = {
      id: "",
      mapName: "",
      apiKey: "",
      isActive: ""
    };

    baseMapModel.prototype.initialize = function(options) {
      this.set("id", options.id);
      this.set("mapName", options.mapName);
      this.set("apiKey", options.apiKey);
      this.set("defaultBaseLayer", this.defaultBaseLayer());
      this.set("createBaseLayer", this.createBaseLayer());
      return this.set("baseLayer", options["default"] ? this.get("defaultBaseLayer") : this.get("createBaseLayer"));
    };

    baseMapModel.prototype.defaultBaseLayer = function() {
      var url;

      url = this.get("apiKey");
      if (this.get("default")) {
        return new L.BingLayer(url, {
          type: this.get("type")
        });
      }
    };

    baseMapModel.prototype.createBaseLayer = function() {
      var url;

      url = this.get("apiKey");
      if (this.get("useBing")) {
        return new L.BingLayer(url, {
          type: this.get("type")
        });
      }
    };

    return baseMapModel;

  })(Backbone.Model);

  app.LayerCollection = (function(_super) {
    __extends(LayerCollection, _super);

    function LayerCollection() {
      _ref2 = LayerCollection.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    LayerCollection.prototype.model = app.LayerModel;

    return LayerCollection;

  })(Backbone.Collection);

  app.BaseMapCollection = (function(_super) {
    __extends(BaseMapCollection, _super);

    function BaseMapCollection() {
      _ref3 = BaseMapCollection.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    BaseMapCollection.prototype.model = app.baseMapModel;

    return BaseMapCollection;

  })(Backbone.Collection);

}).call(this);
